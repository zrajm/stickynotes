-*- org -*-

* TODO Boards
  Should automatically be created when invoked. Use hashlocation to initiate
  one.
* TODO BUGFIX: Background datadump doesn't always update
  It doesn't notice local changes any more.
* TODO Right-clink in menu should give browser-native menu
* TODO Scale coordinates to normalized 10000x10000 pixel grid
  All coordinates should be recalculated to standard pixel grid, so that we get
  the same experience on different resolutions.
* TODO Sync full state at time intervals
  Should we pass along a checksum of the current state with every server GET
  and/or POLL? The server could then check it against its state, and send back
  a full dump (instead of a partial one) if the checksum differs from the
  checksum of the current state.

  NOTE: This could go south quickly if the checksum differs because the user
  changed notes around on this end.

  Should check occasionally that everything is up-to-date with server, so that
  if notes get fucked up they auto-adjust after some time interval. (A checksum
  ping?)
* TODO Send initial state in one chunk
  Even with fifty notes, each using up 5KB this would only mean a 250KB body in
  the response, which would be acceptable.

  Typical note sizes are ~100B (note lack of "K" there!) in which case 50 notes
  (a pretty extreme case!) is about *5KB* is size!

  "Keyframes" could also be sent this way.
* TODO inotifywait issue?
  It seems that stickynotes sometimes leave inotifywait processes behind.
  (Maybe on reload?) Could this be remedied? (Maybe by running with
  `inotifywait &` then trapping signals and `wait`ing, and killing it hard
  stdin disappears/SIGHUP is received?
* TODO Warn when too many tabs are open
* TODO Eliminate memory leaks
* TODO Add some credits on screen
  Link to github + my name + license
* TODO Better separation between server & notes
  The parsing of server response, and putting into note cache should not be
  inside the note cache module.
* TODO Lock note for which server connection has been lost
  Make it transparent & disable draggability?
* TODO Lock note that is being moved by other client
  Make it transparent & disable draggability?
* TODO No events on notes, instead capture them on <main>
* TODO Normalize screen positions
  If the screen consists of "virtual pixels" etc. 10.000x10.00 pixels, which we
  rescale all coordinates to internally, we could then do the same on all
  clients and enjoy a "resolution free" screen, without the client having to
  tell the server which resolution its running at any point.
* TODO BUGFIX: Text cursor on note shouldn't move when note is moved
  Regardless of whether this happens because of server event, or because user
  moved note locally.
* TODO BUGFIX: Place cursor anywhere in text
  Currently cursor can only be placed at beginning of text inside the
  stickynotes, this is caused by the jQuery UI 'draggable' effect somehow. Will
  probably have to reimplement the draggable (and drop jQuery UI?) to fix this.
* TODO Handle '504 (Gateway Timeout)'
  in GET http://localhost/stickynotes/poll.cgi
* TODO Warn user that multiple tabs may not work
  Polling reach alternating tabs in Firefox,
* TODO Give warning when polls are dropped? / >1 tab is open?
* TODO Allow multiple tabs
  One tab should do the long polling from the server, and share its result
  using localStorage. See also:
  http://meta.stackexchange.com/questions/85034/multiple-chat-tabs
* TODO Reimplement server CGI scripts in compiled language
  For better performance. Use Go, maybe?
* TODO Have one single URL for get/put/delete API calls
  It's very nice and easy to get quick overview with each of these put into
  separate files, but if all CGI files are put into a single dir, then an
  `index.cgi` to that directory could simply source the other files as needed
  (after first sourcing a file with the shell functions they all share).

  (This may require adding `index.cgi` to the list of index files in the Apache
  config.)
* SOMEDAY/MAYBE
** TODO Resizeable(?)
* FINISHED
** DONE Load stickynotes on startup
   CLOSED: [2015-05-02 Sat 00:05]
** DONE Store/load coords of stickynotes
   CLOSED: [2015-05-02 Sat 00:05]
** DONE Not move outside screen
   CLOSED: [2015-05-02 Sat 00:05]
** DONE Update stickynotes on remote change
   CLOSED: [2015-05-02 Sat 15:17]
** DONE Dragging should only affect dragged item
   CLOSED: [2015-05-02 Sat 21:24]
   jQuery UI 'stack'ing shouldn't be used when dragging, as this forces updates
   of all stickynotes.
** DONE Slightly rotated stickynotes
   CLOSED: [2015-05-02 Sat 22:21]
   Do this randomly on reload.

       -webkit-transform: rotate(XXdeg);

   where XX is a random number between 5.0 and -5.0
** DONE Favicon
   CLOSED: [2015-05-03 Sun 00:37]
** DONE Note cache should be a module
   CLOSED: [2015-05-03 Sun 02:23]
** DONE Note cache should automatically push to server
   CLOSED: [2015-05-03 Sun 05:48]
** DONE Note cache should automatically update dump in background
   CLOSED: [2015-05-03 Sun 05:48]
   A hook/callback to be invoked whenever the note cache contents change (for
   updating the JSON in the background), and maybe initialize push to server.
** DONE Note cache should do implicit .init() in make function
   CLOSED: [2015-05-03 Sun 17:35]
** DONE Note cache should automatically do long poll from server
   CLOSED: [2015-05-03 Sun 17:35]
** DONE Code should pass (old) jslint
   CLOSED: [2015-05-03 Sun 20:47]
** DONE Context menu
   CLOSED: [2015-05-04 Mon 00:22]
** DONE Right-click for color change
   CLOSED: [2015-05-04 Mon 03:37]
** DONE Creating notes
   CLOSED: [2015-05-04 Mon 03:38]
** DONE Deleting notes
   CLOSED: [2015-05-04 Mon 06:39]
** DONE Load list of stickynotes from server too
   CLOSED: [2015-05-04 Mon 08:35]
** DONE Ignore events caused by self
   CLOSED: [2015-05-05 tis 19:42]
   When a note is updated, an event is pushed to the server. This event is then
   returned to the client in the poll, and applied again. Each client should put
   a session ID into the data passed to the server, and ignore all polled events
   which has its own session ID.

   FIXES BUG: Poll updating caused the cursor repeatedly to move to first
   position in text when editing a note (this as the note was redrawn upon
   receiving the poll of its modification from the server).
** DONE BUG: Polling broken if >1 tab open (FIXED ON CHROMIUM)
   Bug shows up on Chromium 37 and Firefox 36.0.1 (but does not affect Chromium
   25). Bug FIXED ON CHROMIUM by supplying a dummy argument to the `poll.cgi`.

   When there are more than one stickynote tab open, polled events to not reach
   all of them, instead the first polled event goes to the first tab, the
   second event goes to the second tab, etc until the last tab is reached,
   whereupon it starts over with the first tab.

   When googling the problem I found this[1] thread asking why Stackoverflow
   have written their web chat so that only one tab does the polling,
   regardless of how many tabs are open (this tab then share its findings by
   mean of `localStorage`). That thread also referenced an article called
   "Roundup on Parallel Connections" with more info.

   On Chromium 37 one can simply add a dummy argument, or a hash location to
   the URL in order to fool this mechanism. This trick does not work on
   Firefox, however, and a comment on previously mentioned Stackoverflow
   thread[1] seems to suggest that it might actually consider only the domain
   name (something which Facebook has solved by adding random subdomain names
   for their polling).

   [1]: http://meta.stackexchange.com/questions/85034/multiple-chat-tabs
   [2]: http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/

   CLOSED: [2015-05-06 Wed 02:04]
** DONE Move CGI files and favicons into subdirs
   CLOSED: [2015-05-06 ons 19:48]
   To make the work dir less cluttered.
** DONE Rename data dir `notes` -> `data`
   CLOSED: [2015-05-06 ons 20:07]
   Don't forget to update README and other references to it.
** DONE BUG: Deleting a note does not propagate!
   CLOSED: [2015-05-06 ons 20:45]
** DONE Cryptographically strong randomness in IDs
   CLOSED: [2015-05-07 tor 09:11]
   Session IDs, note IDs etc. should all use cryptographic strength randomness
   to avoid collisions (since we don't want to do collision detection).

   Will use 22 base64 encoded characters, giving 132 bit entropy. This should be
   more than enough. 128 bits gives 0.000,000,000,000,000,001% risk of collision
   if there are 26 billion notes (according to table on Wikipedia) -- that
   sounds like a pretty acceptable number -- but we might as well round the
   number off upwards to the nearest base64 number that can be expressed without
   padding. This gets us 22 characters = 132 bit entropy.

   Well use `window.crypto` (or `window.msCrypto`) and fall back on
   `Math.random()` (the only non-stoneage browser to use `Math.random()` will be
   MSIE10, and possibly Safari on Android -- and the latter *might* actually
   have a cryptographically strong `Math.random()`!).

   As long as the number of clients with bad randomness are kept low it'll
   prolly not be a problem (is my guess).
