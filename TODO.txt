-*- org -*-

* TODO Erase note if check_json fails on GET(?)
  Fetching of bad data currently results in errors, but mightn't it just as
  well fail silently, and case the bad data to be erased on the server?
* TODO Rewrite check_* function return result in named variable
  E.g. replace the current hard-to-read:

      check_json "$JSON" 500 "note '$NOTE_ID'"

  with the more straightforward:

      check_json ERR "$JSON" || reply 500 "$ERR in note '$NOTE_ID'"

  Requiring the rewrite of the check_* functions too, of course. check_json()
  would look like this:

      check_json() {
          case "$2" in
              *"<"* | *">"*)                   # don't allow any HTML
                  eval "$1='HTML not allowed in JSON'" ;;
              "{"*"}")
                  eval "$1=''"; return 0 ;;
              "") eval "$1='No data found'" ;;
              *)  eval "$1='Malformed JSON'" ;;
          esac
          return 1
      }
* TODO Remove beginner's instruction when 1st note is created
  The 'Right click for the good stuff.' should disappear if one or more
  stickynotes exists on the board.
* TODO Add some (more) credits on screen
  Link to github + license
* TODO Show debug dump when '?debug' is included in URL
  Make it possible to re-enable using "?debug" or something?

  '?var=var#hash' (everything after '#' is client side)
* TODO Refactor: Put board & DOM elements into separate object
  Split stuff into separate files.
  + Network
  + GUI updates / screen state
* TODO Use HTTP streaming instead of long polling?
  Probably, with many clients (or too much activity) events will be dropped
* TODO Strip HTML on copy/paste
* [0/2] Tests
** TODO Test CGI scripts
** TODO Test Javascript
*** TODO Network events should not happen more often than necessary
*** TODO Redraw events should not happen more often than necessary
* TODO poll.cgi should not create dir for non-existing board
  It's kinda counter-intuitive that any kind of read operation would *write*
  stuff. -- Also it seems inefficient, and a potential attack vector (even
  accidentally so).
* TODO Refactor: Better separation between server & notes
  makeNoteCache() should not contain *any* network logic -- that should all be
  handled with callbacks. The callbacks should probably in turn be bundled into
  an API module, which contains nothing *but* network stuff.
* TODO Render font the same on all browsers
  Use a web font? This is mostly so that each note can contain the same amount
  of text, and so that lines get broken in the same same way, regardless of
  browser/screen.

  What to use? Something similar to handwritten? Or is it better to use a plain
  sans-serif font?
* TODO "Key frame" sync, fetch full state now and then (when inactive)
  Should we pass along a checksum of the current state with every server GET
  and/or POLL? The server could then check it against its state, and send back
  a full dump (instead of a partial one) if the checksum differs from the
  checksum of the current state.

  NOTE: This could go south quickly if the checksum differs because the user
  changed notes around on this end.

  Should check occasionally that everything is up-to-date with server, so that
  if notes get fucked up they auto-adjust after some time interval. (A checksum
  ping?)
* TODO inotifywait issue?
  It seems that stickynotes sometimes leave inotifywait processes behind.
  (Maybe on reload?) Could this be remedied? (Maybe by running with
  `inotifywait &` then trapping signals and `wait`ing, and killing it hard
  stdin disappears/SIGHUP is received?

  Are these left whenever we get a '504 (Gateway Timeout)' in `poll.cgi`?
* TODO Lock note for which server connection has been lost
  Make it transparent & disable draggability?
* TODO Lock note that is being moved by other client
  Make it transparent & disable draggability?
* TODO Don't capture events on note element, capture them on <main>
* [0/7] Optimize get/set, pull/push/poll and GUI redraws
** TODO Load on startup pull (and "key frame" pull)
   Fetch full state from server
   Update the internal cache with received data
   Redraw all notes
*** DONE Redraw each note (once)
    CLOSED: [2015-05-15 Fri 23:46]
** TODO Load on incoming long poll data
   Fetch one note from server
   Update noteCache for that note
   Redraw note
*** DONE Redraw note (once) in GUI
    CLOSED: [2015-05-15 Fri 23:44]
** TODO Note move by user
   if (note position modified) {
       (GUI auto updates)
       Push note to server
       Receive note in poll (but ignore this)
   }
*** DONE Do not redraw note in GUI
    CLOSED: [2015-05-15 Fri 23:42]
** TODO Note text input by user
   if (note text modified) {
       (GUI auto updates)
       Push note to server
       Receive note in poll (but ignore this)
   }
*** DONE Do not redraw note in GUI
    CLOSED: [2015-05-15 Fri 23:42]
** TODO Note color change by user
   if (note color modified) {
       Change note color in GUI
       Push note to server
       Receive note in poll (but ignore this)
   }
*** DONE Redraw note (once) in GUI
    CLOSED: [2015-05-15 Fri 23:48]
** TODO Note delete by user
   Remove note in GUI
   Push note delete to server
   Receive note in poll (can't be ignored)
*** DONE Redraw note (twice) in GUI
    CLOSED: [2015-05-15 Fri 23:56]
    The "twice" here is because first the note is deleted locally, then a poll
    event without a 'session' ID is received (it cannot contain a session ID
    since a deleted note = null, and therefore cannot have a 'session'
    property).

    Since the polled event doesn't have an ID it is applied. And the local
    event is also applied since otherwise the note cannot be deleted if the
    server is not responding.
** TODO Note add by user
   Add note in GUI
   Push note to server
   Receive note in poll (but ignore this)
*** DONE Redraws note
    CLOSED: [2015-05-15 Fri 23:53]
* TODO BUGFIX: Firefox stylesheet with oversized note
  When entering text into a note so that it grows in size it doesn't look good
  in Firefox, but it looks all better after a page reload.
* TODO BUGFIX: Text cursor on note shouldn't move when note is moved
  Regardless of whether this happens because of server event, or because user
  moved note locally.
* TODO BUGFIX: Place cursor anywhere in text
  Currently cursor can only be placed at beginning of text inside the
  stickynotes, this is caused by the jQuery UI 'draggable' effect somehow. Will
  probably have to reimplement the draggable (and drop jQuery UI?) to fix this.
* TODO BUGFIX: Firefox does not react on fist poll event after page load
* TODO Attempt to reconnect to server if user clicks error message
  On receiving an error the client should stop polling the server, until the
  user retries by clicking the error message.

  The error message should also state that this is required for the network
  polling to resume (e.g. "(click here to try to reestablish connection)").

  Error message should also be highlighted (with a fat white border?) on
  mouseover to indicate its clickyness.
* TODO Warn user that multiple tabs may not work
  Polling reach alternating tabs in Firefox,
* TODO Give warning when polls are dropped? / >1 tab is open?
  If browser maxes out on server connections (which it might do when there are
  several tabs open) then polled event will not reach all tabs, but instead
  reach alternating tabs. This is bad, as not all tabs will receive all server
  events. (This is a problem on Firefox, on Chrome it's been worked around with
  a cache-killing extra argument to `poll.cgi`.)

  Either only one tab should make a server connection, and communicate with the
  other tabs by means of localStorage. Or the server could enumerate each
  server response so that we can keep track of, and warn, when not every tab
  gets all events.
* TODO BUGFIX: Allow multiple tabs
  One tab should do the long polling from the server, and share its result
  using localStorage. See also:
  http://meta.stackexchange.com/questions/85034/multiple-chat-tabs

  Removed the cache-bashing query string for long polling when adding boards,
  so now multiple tabs won't work in any browser (each polled event will only
  reach one tab in turn). Previously polling worked properly in Chrome, but not
  in Firefox.
* TODO Eliminate memory leaks
* TODO Reimplement server CGI scripts in compiled language
  For better performance. Use Go, maybe?
* TODO Use true Promise for AJAX calls?
  This technique was mentioned in the article Daniel linked to[1] (which also
  pointed out that the jQuery "promise" in not a proper promise. (Though in
  some places on the internet it is said that jQuery >1.9 have real promises,
  this is denied in other places[3]).

  What's the benefit of Promises here? Should it be used?

  Note that promises only pass one argument to its callbacks, and that we thus
  will have to capture some info (to be used in error messages etc.) at the
  moment of sending the ajax call. How do we do this? Article on Q.js[4] might
  contain helpful tips (as it seems the Q implementation of Promises is
  identical, or very similar, to the one adopted by Ecmascript).

  Possible future 'request' function? This function takes advantage of the fact
  that `Promise.resolve()` returns a Promise, and (a) can take either a value
  (at which point it will resolve the promise with that value) or (b) a any
  object with a `.then()` method (which will resolve the promise whenever the
  thenable is resolved.

      function request(opt) {
          console.log('request', opt);
          // http://www.html5rocks.com/en/tutorials/es6/promises/
          // #toc-lib-compatibility
          return Promise.resolve($.ajax(opt));
      }

  [1]: http://www.html5rocks.com/en/tutorials/es6/promises/
       "JavaScript Promises"
  [2]: https://thewayofcode.wordpress.com/tag/jquery-deferred-broken/
       "Javascript promises and why jQuery implementation is broken"
  [3]: https://blog.domenic.me/youre-missing-the-point-of-promises/
       "You're Missing the Point of Promises"
  [4]: https://github.com/kriskowal/q/wiki/Coming-from-jQuery
       "Coming from jQuery" esp. chapter "Single vs. Multiple Values"
* TODO Key bindings
** TODO <Tab>/<Shift-Tab> to move selection between notes
** TODO Arrow keys to move selected note
** TODO <Esc> to stop editing a note
   <Tab> should also work to jump to the next one, even editing.
** TODO Start typing to edit a note
** TODO <Backspace>/<Delete> in an empty note to delete it
* TODO Move all random number creation to server(?)
  This would allow board number creation to remain secure, a single CGI (which
  creates a board with a random name, and returns that name) could be used to
  create the board -- forcing board names to be auto generated, rather that
  possibly injected by the end user.

  This would also render stickynotes unusable without a server.

  Also we would need a way to fetch a session ID from the server.

  Serial number are used for:

     + Note IDs
     + Session IDs (used by 'by' field in each note)
     + Board IDs
* TODO Better error messages(?)
  Should error messages include the board/note ID number (where applicable)?
* SOMEDAY/MAYBE
** TODO Have one single URL for get/put/delete API calls
   It's very nice and easy to get quick overview with each of these put into
   separate files, but if all CGI files are put into a single dir, then an
   `index.cgi` to that directory could simply source the other files as needed
   (after first sourcing a file with the shell functions they all share).

   (This may require adding `index.cgi` to the list of index files in the Apache
   config.)
** TODO Link to used boards if no board is specified
   Store name of each board visited by user, then show links to each board of
   if no board number is entered. Probably need some extra metadata to guide
   user in this: Board title? Or in last time accessed (or created) enough?
** TODO Resizeable notes(?)
** TODO Reconnect using exponential backoff in case of server errors
   Using this Promise retryer, or a derivate thereof?
   https://gist.github.com/domenic/2936696
** TODO Use some kind of double polling, so as to not miss events?
   That would not be possible without a more complex server setup. Current setup
   would send both pollers the same event.
* FINISHED
** DONE Load stickynotes on startup
   CLOSED: [2015-05-02 Sat 00:05]
** DONE Store/load coords of stickynotes
   CLOSED: [2015-05-02 Sat 00:05]
** DONE Not move outside screen
   CLOSED: [2015-05-02 Sat 00:05]
** DONE Update stickynotes on remote change
   CLOSED: [2015-05-02 Sat 15:17]
** DONE Dragging should only affect dragged item
   CLOSED: [2015-05-02 Sat 21:24]
   jQuery UI 'stack'ing shouldn't be used when dragging, as this forces updates
   of all stickynotes.
** DONE Slightly rotated stickynotes
   CLOSED: [2015-05-02 Sat 22:21]
   Do this randomly on reload.

       -webkit-transform: rotate(XXdeg);

   where XX is a random number between 5.0 and -5.0
** DONE Favicon
   CLOSED: [2015-05-03 Sun 00:37]
** DONE Note cache should be a module
   CLOSED: [2015-05-03 Sun 02:23]
** DONE Note cache should automatically push to server
   CLOSED: [2015-05-03 Sun 05:48]
** DONE Note cache should automatically update dump in background
   CLOSED: [2015-05-03 Sun 05:48]
   A hook/callback to be invoked whenever the note cache contents change (for
   updating the JSON in the background), and maybe initialize push to server.
** DONE Note cache should do implicit .init() in make function
   CLOSED: [2015-05-03 Sun 17:35]
** DONE Note cache should automatically do long poll from server
   CLOSED: [2015-05-03 Sun 17:35]
** DONE Code should pass (old) jslint
   CLOSED: [2015-05-03 Sun 20:47]
** DONE Context menu
   CLOSED: [2015-05-04 Mon 00:22]
** DONE Right-click for color change
   CLOSED: [2015-05-04 Mon 03:37]
** DONE Creating notes
   CLOSED: [2015-05-04 Mon 03:38]
** DONE Deleting notes
   CLOSED: [2015-05-04 Mon 06:39]
** DONE Load list of stickynotes from server too
   CLOSED: [2015-05-04 Mon 08:35]
** DONE Ignore events caused by self
   CLOSED: [2015-05-05 Tue 19:42]
   When a note is updated, an event is pushed to the server. This event is then
   returned to the client in the poll, and applied again. Each client should put
   a session ID into the data passed to the server, and ignore all polled events
   which has its own session ID.

   FIXES BUG: Poll updating caused the cursor repeatedly to move to first
   position in text when editing a note (this as the note was redrawn upon
   receiving the poll of its modification from the server).
** DONE BUG: Polling broken if >1 tab open (FIXED ON CHROMIUM)
   CLOSED: [2015-05-06 Wed 02:04]
   Bug shows up on Chromium 37 and Firefox 36.0.1 (but does not affect Chromium
   25). Bug FIXED ON CHROMIUM by supplying a dummy argument to the `poll.cgi`.

   When there are more than one stickynote tab open, polled events to not reach
   all of them, instead the first polled event goes to the first tab, the
   second event goes to the second tab, etc until the last tab is reached,
   whereupon it starts over with the first tab.

   When googling the problem I found this[1] thread asking why Stackoverflow
   have written their web chat so that only one tab does the polling,
   regardless of how many tabs are open (this tab then share its findings by
   mean of `localStorage`). That thread also referenced an article called
   "Roundup on Parallel Connections" with more info.

   On Chromium 37 one can simply add a dummy argument, or a hash location to
   the URL in order to fool this mechanism. This trick does not work on
   Firefox, however, and a comment on previously mentioned Stackoverflow
   thread[1] seems to suggest that it might actually consider only the domain
   name (something which Facebook has solved by adding random subdomain names
   for their polling).

   [1]: http://meta.stackexchange.com/questions/85034/multiple-chat-tabs
   [2]: http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/
** DONE Move CGI files and favicons into subdirs
   CLOSED: [2015-05-06 Wed 19:48]
   To make the work dir less cluttered.
** DONE Rename data dir `notes` -> `data`
   CLOSED: [2015-05-06 Wed 20:07]
   Don't forget to update README and other references to it.
** DONE BUG: Deleting a note does not propagate!
   CLOSED: [2015-05-06 Wed 20:45]
** DONE Cryptographically strong randomness in IDs
   CLOSED: [2015-05-07 Thu 09:11]
   Session IDs, note IDs etc. should all use cryptographic strength randomness
   to avoid collisions (since we don't want to do collision detection).

   Will use 22 base64 encoded characters, giving 132 bit entropy. This should be
   more than enough. 128 bits gives 0.000,000,000,000,000,001% risk of collision
   if there are 26 billion notes (according to table on Wikipedia) -- that
   sounds like a pretty acceptable number -- but we might as well round the
   number off upwards to the nearest base64 number that can be expressed without
   padding. This gets us 22 characters = 132 bit entropy.

   Well use `window.crypto` (or `window.msCrypto`) and fall back on
   `Math.random()` (the only non-stoneage browser to use `Math.random()` will be
   MSIE10, and possibly Safari on Android -- and the latter *might* actually
   have a cryptographically strong `Math.random()`!).

   As long as the number of clients with bad randomness are kept low it'll
   prolly not be a problem (is my guess).
** DONE BUGFIX: Background data dump doesn't always update
   CLOSED: [2015-05-07 Thu 09:38]
   Local changes aren't noticed any more.
** DONE Right-clink in menu should give browser-native menu
   CLOSED: [2015-05-07 Thu 09:48]
** DONE Check note ID length in the CGI scripts
   CLOSED: [2015-05-09 Sat 23:41]
** DONE Added .json suffix to data files
   CLOSED: [2015-05-10 Sun 00:21]
   A suffix seems logical (since the files *are* in JSON format, after all),
   but also helps since:

   + `list.cgi` now only lists notes with a data file ending in .json, meaning
     backup files and other files without the .json suffix won't get passed
     along to the client.

   + `put.cgi` (and `delete.cgi`) only writes (and deletes) files with a .json
     prefix, limiting the any problem caused by an amok script (because of a
     hacking or bug).
** DONE Server list in {id1:{},id2:{}} format instead of {list:[id1,id2]}
   CLOSED: [2015-05-10 Sun 02:06]
   As a preparation for the 'Send initial state in one chunk'.
** DONE Send initial state in one chunk
   CLOSED: [2015-05-10 Sun 03:07]
   Even with fifty notes, each using up 5KB this would only mean a 250KB body in
   the response, which would be acceptable.

   Typical note sizes are ~100B (note lack of "K" there!) in which case 50 notes
   (a pretty extreme case!) is about *5KB* is size!

   "key frames" could also be sent this way.
** DONE Give user feedback when server errors occurs
   CLOSED: [2015-05-10 Sun 20:05]
** DONE Clear error message when a successful network action is done
   CLOSED: [2015-05-13 Wed 09:08]
   When successfully push note changes to server the error message should be
   cleared.
** DONE Put functions common to all CGI scripts in shared file
   CLOSED: [2015-05-15 Fri 22:20]
** DONE BUGFIX: Typing backwards in Firefox
   CLOSED: [2015-05-15 Fri 23:39]
   For each keypress, when writing a note, the cursor is moved to the beginning
   of the text effectively making text entered backwards. It works just fine in
   Chrome, however.

   Redraw notes on poll() & get(); redraw JSON dump in background on each set().
** DONE Removed dead code (get.cgi and related Javascipt)
   CLOSED: [2015-05-16 Sat 02:33]
   This code isn't used any more since only list.cgi (which returns all notes)
   and poll.cgi (which returns one node on modification) is used to read
   content from the server.
** DONE BUGFIX: Server now responds properly if zero notes are stored
   CLOSED: [2015-05-16 Sat 03:44]
** DONE Moved ajax request to separate function
   CLOSED: [2015-05-17 Sun 13:55]
   This is hopefully useful when migrating to using Javascript ES6 Promises.
** DONE Scale coordinates to normalized pixel grid
   CLOSED: [2015-05-18 Mon 01:50]
   Note coordinates now expressed in percent x/y of total possible span (i.e.
   board width minus note width, and board height minus note height), and
   rounded off to three decimals.

   This gives us a "resolution free" screen, meaning that each client will see
   all notes and in their (approximate) right place. A note an the bottom right
   corner, will be in the bottom right corner for each user.

   Conversion to and from "percent coordinates" are done on getting/setting, and
   so our internal data structure knows only these coordinates. noteCache
   exposes a method setSize() which should be called in order to recalculate and
   redraw the notes when window is resized.
** DONE BUGFIX: Cursor should show on new notes on Firefox
   CLOSED: [2015-05-18 Mon 02:57]
   Firefox do not display the text cursor (caret) in contenteditable elements
   unless they have some content, therefore added '<br>' as content if note
   content in empty. (This does not seem to affect anything else.)
** DONE Simplified request function args
   CLOSED: [2015-05-18 Mon 23:56]
** DONE Rename `list.cgi` -> `get.cgi`
   CLOSED: [2015-05-20 Wed 23:01]
   Since `list.cgi` returns the content of all notes on the board (and not just
   a list of which notes are available), it is more correct to call it
   `get.cgi`.
** DONE BUGFIX: Encode JSON properly in data files
   CLOSED: [2015-05-21 Thu 00:50]
   If one inserts data with " (at least Daniel copy/pasted an image into a note,
   resulting in an <img> tag being inserted) then the JSON written on the server
   is broken (any occurring '"' are not escaped properly) causing the client to
   fail completely on initial load (no notes are shown at all).

   This turns out to be a buncha missed '-r' for the 'read' command (without
   which '\"' was interpreted as a plain '"', destroying the data integrity of
   the JSON whenever there were escaped characters.
** DONE Support for multiple boards
   CLOSED: [2015-05-21 Thu 09:34]
   If loaded without specified hash location, generate random hash location and
   redirect there. If loaded with a hash location, display the associated sticky note board.
** DONE BUGFIX: Load new board from server when hash location changes
   CLOSED: [2015-05-25 Mon 00:20]
   Currently the board associated with a specific hash location isn't loaded if
   one changes the hash location (one has to do a manual refresh after entering
   hash location).
** DONE Refactor: 'reply' shell function now only needs HTTP error number
   CLOSED: [2015-05-25 Mon 02:24]
   Instead of having to specify the full error string (e.g. "404 Not Found")
   for the 'reply' function it is now enough to specify the error code number
   only (e.g. "400") and 'reply' will fill message given in the HTTP specs.
** DONE Bad board name in URL should not create a new board
   CLOSED: [2015-05-25 Mon 09:10]
   I.e. if you type an invalid #BOARD ID then, instead of redirecting to a
   random valid board, the user should get an error message. (And a link
   to a random new board?)
** DONE Put makeNoteCache() in its own Javascript file
   CLOSED: [2015-05-25 Mon 09:26]
** DONE Change GUI to make it look professional
   CLOSED: [2015-05-28 Thu 22:53]
   Removed debug dump, added name of program & programmer + copyright year.
** DONE Server should refuse to accept any JSON with '<' or '>' in it
   CLOSED: [2015-06-09 Tue 23:54]
